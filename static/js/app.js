// Generated by CoffeeScript 1.2.1-pre
(function() {
  var InfoWindow,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Preferences = (function() {

    Preferences.name = 'Preferences';

    function Preferences() {
      this.cookieName = "preferences";
      this.items = {};
      this.load();
    }

    Preferences.prototype.load = function() {
      var rawValue;
      rawValue = $.cookie(this.cookieName);
      if (rawValue) return this.items = JSON.parse(rawValue);
    };

    Preferences.prototype.save = function() {
      return $.cookie(this.cookieName, JSON.stringify(this.items), {
        expires: 365
      });
    };

    Preferences.prototype.get = function(key) {
      return this.items[key];
    };

    Preferences.prototype.set = function(key, value) {
      this.items[key] = value;
      return this.save();
    };

    Preferences.prototype.setDefault = function(key, defaultValue) {
      if (!this.items[key]) this.items[key] = defaultValue;
      return this.save();
    };

    return Preferences;

  })();

  this.MapView = (function(_super) {

    __extends(MapView, _super);

    MapView.name = 'MapView';

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.events = {
      'click input[type="checkbox"]': '_togglePlaceType',
      'click button#add-place': '_addPlace'
    };

    MapView.prototype.initialize = function() {
      var _this = this;
      this.preferences = this.options.preferences;
      this.collection.bind('sync', function() {
        return _this.collection.fetch();
      });
      return this.render();
    };

    MapView.prototype.render = function() {
      var _this = this;
      console.log(this.preferences.items);
      this.map = new google.maps.Map(this.$('#map-canvas').get(0), {
        zoom: this.preferences.get('zoom'),
        center: new google.maps.LatLng(this.model.get('centerLat'), this.model.get('centerLng')),
        mapTypeId: this.model.get('mapTypeId')
      });
      google.maps.event.addListener(this.map, 'zoom_changed', function() {
        return _this.preferences.set('zoom', _this.map.getZoom());
      });
      this.userid = this.model.get('userid');
      if (this.userid > 0) {
        this.collection.each(function(placeType) {
          return new PlaceTypeView({
            model: placeType,
            collection: placeType.places,
            map: _this.map
          });
        });
        return this.$('input[type="checkbox"]:checked').each(function(index, el) {
          var model;
          model = _this.collection.get($(el).val());
          return model.show();
        });
      }
    };

    MapView.prototype._togglePlaceType = function(e) {
      var inputEl, model;
      inputEl = this.$(e.target);
      model = this.collection.get(inputEl.val());
      if (inputEl.is(":checked")) {
        return model.show();
      } else {
        return model.hide();
      }
    };

    MapView.prototype._addPlace = function(e) {
      var lat, lng;
      console.log("_addPlace", e);
      lat = this.map.getCenter().lat();
      lng = this.map.getCenter().lng();
      console.log(lat, lng);
      return this.collection.get(1).places.create({
        point: "POINT (" + lat + " " + lng + ")"
      });
    };

    return MapView;

  })(Backbone.View);

  this.PlaceTypeView = (function(_super) {

    __extends(PlaceTypeView, _super);

    PlaceTypeView.name = 'PlaceTypeView';

    function PlaceTypeView() {
      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);
      return PlaceTypeView.__super__.constructor.apply(this, arguments);
    }

    PlaceTypeView.prototype.initialize = function() {
      this.map = this.options.map;
      this.model.bind('show', this.show);
      this.model.bind('hide', this.hide);
      return this.render();
    };

    PlaceTypeView.prototype.render = function() {
      return this.placesView = new PlacesView({
        collection: this.collection,
        map: this.map
      });
    };

    PlaceTypeView.prototype.show = function() {
      return this.collection.fetch();
    };

    PlaceTypeView.prototype.hide = function() {};

    return PlaceTypeView;

  })(Backbone.View);

  this.PlacesView = (function(_super) {

    __extends(PlacesView, _super);

    PlacesView.name = 'PlacesView';

    function PlacesView() {
      this.addPlaceItemView = __bind(this.addPlaceItemView, this);

      this.render = __bind(this.render, this);
      return PlacesView.__super__.constructor.apply(this, arguments);
    }

    PlacesView.prototype.initialize = function() {
      this.map = this.options.map;
      this.placeItemViews = [];
      this.collection.bind('add', this.addPlaceItemView);
      this.collection.bind('reset', this.render);
      if (this.collection.length > 0) return this.render();
    };

    PlacesView.prototype.render = function() {
      var _this = this;
      _.each(this.placeItemViews, function(placeItemView) {
        return placeItemView.hide();
      });
      this.placeItemViews = [];
      return this.collection.each(this.addPlaceItemView);
    };

    PlacesView.prototype.addPlaceItemView = function(place) {
      var _this = this;
      place.bind('sync', function() {
        return _this.collection.fetch();
      });
      return this.placeItemViews.push(new PlaceItemView({
        model: place,
        map: this.map
      }));
    };

    return PlacesView;

  })(Backbone.View);

  this.PlaceItemView = (function(_super) {

    __extends(PlaceItemView, _super);

    PlaceItemView.name = 'PlaceItemView';

    function PlaceItemView() {
      this.click = __bind(this.click, this);

      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);

      this.dragend = __bind(this.dragend, this);
      return PlaceItemView.__super__.constructor.apply(this, arguments);
    }

    PlaceItemView.prototype.initialize = function() {
      this.map = this.options.map;
      this.model.bind('show', this.show);
      this.model.bind('hide', this.hide);
      this.model.bind('sync', this.show);
      return this.render();
    };

    PlaceItemView.prototype.render = function() {
      this.marker = new google.maps.Marker({
        draggable: true
      });
      google.maps.event.addListener(this.marker, "dragend", this.dragend);
      google.maps.event.addListener(this.marker, "click", this.click);
      return this.show();
    };

    PlaceItemView.prototype.dragend = function() {
      if (confirm("Are you sure you want to move this marker?")) {
        this.model.set({
          lat: this.marker.position.lat(),
          lng: this.marker.position.lng()
        });
        return this.model.save();
      } else {
        return this.marker.setPosition(new google.maps.LatLng(this.model.get('lat'), this.model.get('lng')));
      }
    };

    PlaceItemView.prototype.show = function() {
      var title;
      this.position = new google.maps.LatLng(this.model.get('lat'), this.model.get('lng'));
      this.marker.setPosition(this.position);
      title = 'P' + this.model.get('id');
      if (this.model.get('interestlevel')) {
        title += " - INTEREST " + this.model.get('interestlevel');
      }
      if (this.model.get('territoryno')) {
        title += " - TERRITORY# " + this.model.get('territoryno');
      }
      if (this.model.get('markerno')) {
        title += " - MARKER# " + this.model.get('markerno');
      }
      if (this.model.get('sortno')) {
        title += " - SORT# " + this.model.get('sortno');
      }
      if (this.model.get('blockno')) {
        title += " - BLOCK# " + this.model.get('blockno');
      }
      if (this.model.get('houseno')) {
        title += " - HOUSE# " + this.model.get('houseno');
      }
      if (this.model.get('description')) {
        title += "\n\n" + "DESCRIPTION\n" + this.model.get('description');
      }
      if (this.model.get('persons')) {
        title += "\n\n" + "PERSONS\n" + this.model.get('persons');
      }
      if (this.model.get('actions')) {
        title += "\n\n" + "ACTIONS\n" + this.model.get('actions');
      }
      if (this.model.get('notes')) {
        title += "\n\n" + "NOTES\n" + this.model.get('notes');
      }
      this.marker.setTitle(title);
      if (this.model.get('markerno')) {
        this.marker.setIcon('/site_media/static/img/mapicons/25x30/numbers/number_' + this.model.get('markerno') + '.png');
      }
      return this.marker.setMap(this.map);
    };

    PlaceItemView.prototype.hide = function() {
      return this.marker.setMap(null);
    };

    PlaceItemView.prototype.click = function() {
      return this.infoWindow = new InfoWindow({
        model: this.model
      });
    };

    return PlaceItemView;

  })(Backbone.View);

  InfoWindow = (function(_super) {

    __extends(InfoWindow, _super);

    InfoWindow.name = 'InfoWindow';

    function InfoWindow() {
      return InfoWindow.__super__.constructor.apply(this, arguments);
    }

    InfoWindow.prototype.template = _.template($('#info-window-template').html());

    InfoWindow.prototype.editTemplate = _.template($('#edit-info-window-template').html());

    InfoWindow.prototype.className = 'modal';

    InfoWindow.prototype.events = {
      'click a.delete': '_delete',
      'click a.edit': '_edit',
      'click a.view': '_view',
      'click a.save-continue': '_saveContinue',
      'click a.save': '_save'
    };

    InfoWindow.prototype.initialize = function() {
      this.editing = false;
      return this.render();
    };

    InfoWindow.prototype.render = function() {
      if (this.editing) {
        this.$el.html(this.editTemplate({
          model: this.model
        }));
      } else {
        this.$el.html(this.template({
          model: this.model
        }));
      }
      return this.$el.modal('show');
    };

    InfoWindow.prototype._edit = function() {
      this.editing = true;
      return this.render();
    };

    InfoWindow.prototype._delete = function() {
      var _this = this;
      if (confirm("Are you sure you want to delete this place?")) {
        this.model.bind('destroy', function() {
          return _this.$el.modal('hide');
        });
        return this.model.destroy();
      }
    };

    InfoWindow.prototype._view = function() {
      if (confirm("Are you sure you want to abandon edit?")) {
        this.editing = false;
        return this.render();
      }
    };

    InfoWindow.prototype._saveContinue = function() {
      return this.persist();
    };

    InfoWindow.prototype._save = function() {
      var _this = this;
      this.persist();
      return this.model.bind('sync', function() {
        return _this.$el.modal('hide');
      });
    };

    InfoWindow.prototype.persist = function() {
      this.model.set({
        territoryno: this.$('#ed-territoryno').val(),
        markerno: Number(this.$('#ed-markerno').val()),
        sortno: Number(this.$('#ed-sortno').val()),
        blockno: this.$('#ed-blockno').val(),
        interestlevel: Number(this.$('#ed-interestlevel').val()),
        houseno: this.$('#ed-houseno').val(),
        description: this.$('#ed-description').val(),
        languages: this.$('#ed-languages').val(),
        persons: this.$('#ed-persons').val(),
        notes: this.$('#ed-notes').val(),
        actions: this.$('#ed-actions').val()
      });
      return this.model.save();
    };

    return InfoWindow;

  })(Backbone.View);

}).call(this);
