// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.MapView = (function(_super) {

    __extends(MapView, _super);

    MapView.name = 'MapView';

    function MapView() {
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.render = function() {
      var bounds, latC, longC, options,
        _this = this;
      bounds = this.options.bounds;
      latC = bounds.maxLatitude - bounds.minLatitude;
      latC = (latC / 2) + bounds.minLatitude;
      longC = bounds.maxLongitude - bounds.minLongitude;
      longC = (longC / 2) + bounds.minLongitude;
      options = {
        zoom: 11,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        center: this._latLng(latC, longC)
      };
      this._map = new google.maps.Map(this.el[0], options);
      return google.maps.event.addListenerOnce(this._map, "idle", function() {
        return _this.options.ready();
      });
    };

    MapView.prototype._latLng = function(latitude, longitude) {
      return new google.maps.LatLng(latitude, longitude);
    };

    MapView.prototype.drawBox = function(color, lat1, lat2, long1, long2) {
      var box, boxCoords;
      boxCoords = [this._latLng(lat1, long1), this._latLng(lat2, long1), this._latLng(lat2, long2), this._latLng(lat1, long2)];
      box = new google.maps.Polygon({
        paths: boxCoords,
        strokeColor: color,
        strokeOpacity: 0.8,
        strokeWeight: 2,
        fillColor: color,
        fillOpacity: 0
      });
      box.setMap(this._map);
      return box;
    };

    return MapView;

  })(Backbone.View);

}).call(this);
