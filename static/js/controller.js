// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.Controller = (function(_super) {

    __extends(Controller, _super);

    Controller.name = 'Controller';

    function Controller() {
      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.initialize = function(options) {
      this.bounds = options.bounds;
      this.bounds.minDate = new Date(this.bounds.minDate);
      this.bounds.maxDate = new Date(this.bounds.maxDate);
      this.currentDate = this.bounds.minDate;
      this.currentScale = "year";
      this.views = {};
      this.bind("change:currentScale", this.setZones, this);
      return this.bind("change:currentDate", this.setZones, this);
    };

    Controller.prototype.setCurrentScale = function(scale) {
      this.currentScale = scale;
      return this.trigger("change:currentScale");
    };

    Controller.prototype.setCurrentYear = function(year) {
      this.currentDate = new Date(year, 0, 1);
      return this.trigger("change:currentDate");
    };

    Controller.prototype.addView = function(name, view) {
      this.views[name] = view;
      return view.render();
    };

    Controller.prototype.setZones = function() {
      var _this = this;
      this.zones = new ZoneCollection([], {
        date: this.currentDate,
        scale: this.currentScale
      });
      this._zonesDidFetch = false;
      return this.zones.fetch({
        success: function() {
          return _this.zonesDidFetch();
        }
      });
    };

    Controller.prototype.zonesDidFetch = function() {
      this._zonesDidFetch = true;
      return this._drawHeatMap();
    };

    Controller.prototype.mapDidRender = function() {
      this._mapDidRender = true;
      return this._drawHeatMap();
    };

    Controller.prototype._drawHeatMap = function() {
      if (!(this._mapDidRender && this._zonesDidFetch)) return;
      return this.views['map'].setHeatmapDataSet(this.zones.heatmapDataSet());
    };

    return Controller;

  })(Backbone.Router);

}).call(this);
