// Generated by CoffeeScript 1.2.1-pre
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.Zone = (function(_super) {

    __extends(Zone, _super);

    Zone.name = 'Zone';

    function Zone() {
      return Zone.__super__.constructor.apply(this, arguments);
    }

    Zone.prototype.total = function() {
      return _(this.get("charges")).values().reduce(function(sum, count) {
        return sum + count;
      }, 0);
    };

    Zone.prototype.centeredLongitude = function() {
      var coords, middle;
      coords = this.get("coordinates");
      middle = (coords[1][1] - coords[0][1]) / 2.0;
      return middle + coords[0][1];
    };

    Zone.prototype.centeredLatitude = function() {
      var coords, middle;
      coords = this.get("coordinates");
      middle = (coords[1][0] - coords[0][0]) / 2.0;
      return middle + coords[0][0];
    };

    Zone.prototype.drawBox = function(map) {
      var coordinates;
      if (this._box) this._box.setMap(null);
      coordinates = this.get("coordinates");
      return this._box = map.drawBox("#0000FF", coordinates[0][0], coordinates[1][0], coordinates[0][1], coordinates[1][1]);
    };

    Zone.prototype.hideBox = function() {
      if (!this._box) return;
      this._box.setMap(null);
      return this._box = null;
    };

    return Zone;

  })(Backbone.Model);

  window.ZoneCollection = (function(_super) {

    __extends(ZoneCollection, _super);

    ZoneCollection.name = 'ZoneCollection';

    function ZoneCollection() {
      return ZoneCollection.__super__.constructor.apply(this, arguments);
    }

    ZoneCollection.prototype.model = Zone;

    ZoneCollection.prototype.initialize = function(models, options) {
      this.date = options.date;
      return this.scale = options.scale;
    };

    ZoneCollection.prototype.url = function() {
      var obj;
      obj = {
        date: "" + (this.date.getUTCFullYear()) + "-" + (this.date.getUTCMonth() + 1) + "-" + (this.date.getUTCDate()),
        scale: this.scale
      };
      return "/densities?" + ($.param(obj));
    };

    ZoneCollection.prototype.heatmapDataSet = function() {
      var set;
      set = {
        max: 0,
        data: []
      };
      this.forEach(function(zone) {
        var data;
        data = {
          lat: zone.centeredLatitude(),
          lng: zone.centeredLongitude(),
          count: zone.total()
        };
        set.data.push(data);
        if (set.max < data.count) return set.max = data.count;
      });
      return set;
    };

    return ZoneCollection;

  })(Backbone.Collection);

}).call(this);
