{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"InfoWindow",
				"editInfoWindow"
			],
			[
				"js",
				"jsapp"
			],
			[
				"get",
				"get_point"
			]
		]
	},
	"buffers":
	[
		{
			"file": "templates/map/base.html",
			"settings":
			{
				"buffer_size": 3366,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/js/app.coffee",
			"settings":
			{
				"buffer_size": 6248,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/js/models.coffee",
			"settings":
			{
				"buffer_size": 2200,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\nimport wingdbstub\n\nfrom django.contrib.gis.db import models\nfrom django.contrib.auth.models import User\nfrom current_user import registration\nfrom django_extensions.db.models import TimeStampedModel\nfrom current_user.models import CurrentUserField\nfrom core.models import MyModel\nfrom tastypie.models import create_api_key\n\nmodels.signals.post_save.connect(create_api_key, sender=User)\n\nclass Place(MyModel):\n    confirmed = models.BooleanField(\"Confirmed?\",)\n    territoryno = models.CharField(\"Territory No\", max_length=6, null=True, blank=True, db_index=True)\n    sortno = models.PositiveIntegerField(\"Sort No\", null=True, default=0)\n    blockno = models.CharField(\"Block No\", max_length=32, null=True, blank=True)\n    pointno = models.PositiveIntegerField(\"Point No\", null=True, blank=True)\n    markerno = models.PositiveIntegerField(\"Marker No\", null=True, blank=True, db_index=True)\n    houseno = models.CharField(\"House No\", max_length=32, null=True, blank=True)\n    persons = models.TextField(\"Persons\", null=True, blank=True)\n    interestlevel = models.IntegerField(\"Interest Level\", null=True, blank=True)\n    actions = models.TextField(\"Actions\", null=True, blank=True)\n    notes = models.TextField(\"Notes\", null=True, blank=True)\n    description = models.CharField(\"Description\", max_length=255, null=True, blank=True)\n    languages = models.CharField(\"Description\", max_length=255, null=True, blank=True, default=\"e:English\\ns:Spanish\\nch:Chinese\\nf:French\\ni:Italian\\nx:German\\n?:Other\")\n\n    name = models.CharField(\"Name\", max_length=128, null=True, blank=True)\n\n    placetype_id = models.IntegerField(\"Place Type ID\", null=True, blank=True)\n    sourcetype = models.CharField(\"Source Type\", max_length=16, null=True, blank=True)\n    source_id = models.IntegerField(\"Source ID\", null=True, blank=True)\n    geocoded = models.BooleanField(\"GeoCoded?\", )\n    multiunit = models.BooleanField(\"MultiUnit?\", )\n    residential = models.BooleanField(\"Residential?\", default=True )\n    deleted = models.BooleanField(\"Deleted?\", db_index=True)\n    googlemapurl = models.CharField(\"Google Map URL\", max_length=255, blank=True)\n    point = models.PointField(\"LatLng\", default='POINT(0 0)')\n\n    owner =  CurrentUserField(blank=True, related_name = \"flt_place_owner\", default=1)\n    modifier = CurrentUserField(blank=True, related_name = \"flt_place_modifier\", default=1)\n\n\n    provinceno = models.PositiveIntegerField(\"Province No\", null=True, blank=True)\n    cantonno = models.PositiveIntegerField(\"Canton No\", null=True, blank=True)\n    districtno = models.PositiveIntegerField(\"District No\", null=True, blank=True)\n\n    directions = models.CharField(\"Directions\", max_length=255, null=True, blank=True)\n    districtname = models.CharField(\"District Name\", max_length=32, null=True, blank=True)\n\n    number = models.PositiveIntegerField(\"Number\", null=True, blank=True)\n    geo_name_id = models.PositiveIntegerField(\"GEO Name ID\", null=True, blank=True)\n    religiousaffiliation = models.CharField(\"Religious Affiliation\", max_length=32, null=True, blank=True)\n\n    postalcode = models.CharField(\"Zip Code\", max_length=32, null=True, blank=True)\n\n    noteshtml = models.TextField(\"Notes HTML\", null=True, blank=True)\n\n    objects = models.GeoManager()\n\n    def ParseDetails(self):\n        from django.contrib.gis.geos import Point\n        latitude = 0.0\n        longitude = 0.0\n        if self.googlemapurl:\n            import re\n            # look for ll=9.999107,-84.106216 like string for lat/long\n            # http://maps.google.com/maps?hl=en&ll=10.001479,-84.134258&spn=0.001751,0.002682&t=h&vpsrc=6&z=19\n            reobj = re.compile(r\"[&;\\?]ll=(?P<latitude>[\\-0-9.]+),(?P<longitude>[\\-0-9.]+)\")\n            match = reobj.search(self.googlemapurl)\n            if match:\n                latitude = float(match.group(\"latitude\"))\n                longitude = float(match.group(\"longitude\"))\n\n                from django.contrib.gis.geos import Point\n                self.point = Point(latitude, longitude)\n\n        self.point = Point(latitude, longitude)\n        self.isgeocoded = True if (self.point.y and self.point.x) else False\n\n    @property\n    def full_name(self):\n        ret = u'p'\n        ret += str(self.id)\n        if self.provinceno:\n            ret += ' t'\n            ret += str(self.provinceno).zfill(3) \n            ret += '-'\n        if self.cantonno: # canton\n            ret += str(self.cantonno).zfill(2) \n            ret += '-'\n        if self.districtno:\n            ret += str(self.districtno).zfill(3)\n        if self.districtname:\n            ret += ' '\n            ret += self.districtname\n        if self.territoryno:\n            ret += '-'\n            ret += self.territoryno\n        if self.sortno:\n            ret += ' '\n            ret += str(self.sortno).zfill(4)\n        if self.blockno:\n            ret += ' b'\n            ret += self.blockno\n        if self.pointno:\n            ret += ' p'\n            ret += str(self.pointno).zfill(2)\n\n        return ret\n\n    class Meta:\n        db_table = u'of_places'               \n        #unique_together = (\"boundary_type\", \"name\", \"number\", \"code\"),\n        verbose_name_plural = \"places\"\n        permissions = (\n            ('access_places','Access to Places'), \n        )\n\n    def save(self, *args, **kw):\n        #self.ParseDetails()\n        self.geocoded = True if (self.point.y and self.point.x) else False\n        \n        # In order to handle renumbering of markerno's, I need to see if markno has changed.\n        # If so, handle renumbering\n        self._handleMarkernoChangedSave()\n        \n        super(Place, self).save(*args, **kw)\n\n    def type(self):\n        return u'place'\n\n    def __unicode__(self):\n        return self.full_name\n\n    def _maxMarkerno(self, territoryno):\n        result = Place.objects.filter(territoryno = '4-1-2').aggregate(Max('markerno'))\n        if result:\n            return result['markerno__max']\n        else:\n            return 0\n\n    # default markerno to be max markerno + 1\n    def _handleMarkernoChangedAdded(self):\n        \"\"\"If Place is added, need to reorder other markerno's in territory\"\"\"\n        x=0\n        pass\n    \n    def _handleMarkernoChangedDelete(self):\n        \"\"\"If Place is deleted, need to reorder other markerno's in territory\"\"\"\n        x=0\n        \n        pass\n    \n    # update of_places set markerno = markerno + 1 where territoryno = '4-1-2' and markerno is not null\n    def _handleMarkernoChangedSave(self):\n        \"\"\"If Place.markerno is changed, need to reorder other markerno's\"\"\"\n        \n        # this is a new Place\n        if not self.id:\n            # if no markerno was set\n            # set it to max markerno + 1\n            if not self.markerno:\n                pass\n            \n            # else adjust affected markerno's\n            else:\n                pass\n            \n        # existing Place\n        else:\n            # get previous data to determine how to proceed\n            prevPlace = Place.objects.get(id=self.id)\n            prev_id = prevPlace.id\n            prev_territoryno = prevPlace.territoryno\n            prev_markerno = prevPlace.markerno\n        \n            # if new Place.territoryno is different that previous\n            # need to reorder markerno's prev_territoryno\n            # need to reorder markerno's in current_territoryno\n            if self.territoryno != prevPlace.territoryno:\n                pass\n            \n            # only reorder markers in current territory\n            else:\n                pass\n",
			"file": "apps/places/models.py",
			"file_size": 7406,
			"file_write_time": 129750366243635942,
			"settings":
			{
				"buffer_size": 7554,
				"line_ending": "Windows"
			}
		},
		{
			"file": "apps/map/views.py",
			"settings":
			{
				"buffer_size": 1628,
				"line_ending": "Unix"
			}
		},
		{
			"file": "docs/MarkerNos.md",
			"settings":
			{
				"buffer_size": 1184,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/CoffeeScript/Commands/CoffeeScript.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				":W",
				":w - Save"
			],
			[
				":w",
				":w - Save"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pack	",
				"Package Control: Install Package"
			],
			[
				"java",
				"Format: Javascript"
			],
			[
				"Snippet: bd",
				"Snippet: <bdo>"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"",
				"HTML: Encode Special Characters"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"prev",
				"Markdown Preview: current file in browser"
			],
			[
				"mark",
				"Markdown Preview: current file in browser"
			],
			[
				"previ",
				"Markdown Preview: current file in Sublime Text"
			],
			[
				"fetch",
				"Fetch: Manage remote files"
			],
			[
				"fet",
				"Fetch: Manage remote files"
			],
			[
				"package",
				"Package Control: Add Repository"
			],
			[
				"mar",
				"Set Syntax: Markdown"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 107.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Larry/__prjs/ourfield/ve/Lib/site-packages/pinax_theme_bootstrap/static/bootstrap/less/responsive.less",
		"/C/Users/Larry/__prjs/ourfield/ve/Lib/site-packages/pinax_theme_bootstrap/static/bootstrap/css/bootstrap-responsive.css",
		"/C/Users/Larry/__prjs/ourfield/static/css/map.css",
		"/C/Users/Larry/__prjs/ourfield/ve/Lib/site-packages/pinax_theme_bootstrap/static/bootstrap/less/navbar.less",
		"/C/Users/Larry/__prjs/ourfield/templates/map/crosshair.html",
		"/C/Users/Larry/__prjs/ourfield/static/js/jquery.cookie.js",
		"/C/Users/Larry/__prjs/ourfield/fabfile.py",
		"/C/Users/Larry/__prjs/ourfield/templates/map/info-window-template.html",
		"/C/Users/Larry/__prjs/ourfield/templates/map/edit-info-window-template.html",
		"/C/Users/Larry/__prjs/ourfield/templates/homepage.html",
		"/C/Users/Larry/__prjs/ourfield/apps/places/commands.py",
		"/C/Users/Larry/__prjs/ourfield/apps/places/admin.py",
		"/C/Users/Larry/__prjs/ourfield/apps/places/api.py",
		"/C/Users/Larry/__prjs/ourfield/static/js/app.coffee",
		"/C/Users/Larry/__prjs/ourfield/templates/map/base.html",
		"/C/Users/Larry/__prjs/ourfield/apps/places/models.py",
		"/C/Users/Larry/__prjs/ourfield/local_settings.py",
		"/C/Users/Larry/__prjs/ourfield/apps/map/views.py",
		"/C/Users/Larry/__prjs/ourfield_2/settings.py",
		"/C/Users/Larry/__prjs/ourfield/settings.py",
		"/C/Users/Larry/__prjs/ourfield_2/local_settings.py",
		"/C/Users/Larry/__prjs/z_others/django-backbone-example/backbone_example/templates/index.html",
		"/C/Users/Larry/__prjs/ourfield/templates/profiles/_profile_item.html",
		"/C/Users/Larry/__prjs/ourfield/.gitignore",
		"/C/Users/Larry/AppData/Roaming/Sublime Text 2/Packages/TodoManager/TodoManager.sublime-settings",
		"/C/Users/Larry/__prjs/ourfield/ve/Lib/site-packages/pinax_theme_bootstrap/templates/subnav_base.html",
		"/C/Users/Larry/__prjs/ourfield/templates/site_base.html",
		"/C/Users/Larry/__prjs/ourfield/static/js/app_map_sample.coffee",
		"/C/Users/Larry/__prjs/ourfield/private/lwe_scratch_notes_onmodels_etc.md",
		"/C/Users/Larry/__prjs/ourfield/docs/lwe_scratch_notes_onmodels_etc.md",
		"/C/Users/Larry/__prjs/ourfield/static/js/ICanHaz.min.js",
		"/C/Users/Larry/__prjs/z_others/_b/index.html",
		"/C/Users/Larry/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Larry/AppData/Roaming/Sublime Text 2/Packages/Tag/Tag Package.sublime-settings",
		"/C/Users/Larry/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Larry/__prjs/ourfield/static/js/backbone-tastypie.js",
		"/C/Users/Larry/__prjs/ourfield/static/js/crosshair.coffee",
		"/C/Users/Larry/__prjs/ourfield/static/js/backbone.js",
		"/C/Users/Larry/__prjs/ourfield/static/js/routes.js",
		"/C/Users/Larry/My Dropbox/ourfield/github_fltsys/private/js/underscore.js",
		"/C/Users/Larry/My Dropbox/ourfield/github_fltsys/private/js/backbone.js",
		"/C/Users/Larry/My Dropbox/ourfield/github_fltsys/private/js/backbone-tastypie.js",
		"/C/Users/Larry/__prjs/ourfield/apps/en/urls.py",
		"/C/Users/Larry/My Dropbox/ourfield/github_fltsys/private/js/gmap4.html",
		"/C/Users/Larry/__prjs/ourfield/private/data/dat/geo_names/featureCodes_en.txt",
		"/C/Users/Larry/__prjs/ourfield/private/data/dat/geo_names/boundary_types.txt",
		"/C/Users/Larry/__prjs/ourfield/private/data/dat/geo_names/geonames_allcountries.txt",
		"/C/Users/Larry/__prjs/ourfield/apps/en/views.py",
		"/C/Users/Larry/__prjs/ourfield/apps/en/api.py",
		"/C/Users/Larry/__prjs/ourfield/urls.py",
		"/C/Users/Larry/__prjs/ourfield/apps/en/models.py",
		"/C/Users/Larry/__prjs/ourfield_2/apps/en/views.py",
		"/C/Users/Larry/__prjs/ourfield/apps/places/urls.py",
		"/C/Users/Larry/__prjs/ourfield_2/apps/en/urls.py",
		"/C/Users/Larry/__prjs/ourfield_2/apps/en/note.py",
		"/C/Users/Larry/__prjs/ourfield_2/apps/en/models.py",
		"/C/Users/Larry/__prjs/ourfield_2/apps/home/views.py",
		"/C/Users/Larry/__prjs/ourfield/.idea/workspace.xml",
		"/C/Users/Larry/__prjs/ourfield/fixtures/initial_data.json",
		"/C/Users/Larry/__prjs/ourfield/ve/Lib/site-packages/pinax_theme_bootstrap/templates/theme_base.html",
		"/C/Users/Larry/__prjs/ourfield/static/js/models.js",
		"/C/Users/Larry/__prjs/ourfield/static/js/app.js",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/models.coffee",
		"/C/Users/Larry/__prjs/z_others/Python-Webserver/webserver.py",
		"/C/Users/Larry/__prjs/ourfield/wc.bat",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/app.coffee",
		"/C/Users/Larry/My Dropbox/OurField Umair/larry_django/ourfield/apps/places/api.py",
		"/C/Users/Larry/My Dropbox/OurField Umair/larry_django/ourfield/apps/places/models.py",
		"/C/Users/Larry/__prjs/z_others/mapx/js/app.js",
		"/C/Users/Larry/__prjs/ourfield/scripts/coffee/app_last.coffee",
		"/C/Users/Larry/__prjs/ourfield/scripts/coffee/app_save.coffee",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/example_map.coffee",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/markers.coffee",
		"/C/Users/Larry/My Dropbox/OurField Umair/larry_django/ourfield/urls.py",
		"/C/Users/Larry/__prjs/z_others/memento/public/js/map.coffee",
		"/C/Users/Larry/__prjs/z_others/memento/app.coffee",
		"/C/Users/Larry/__prjs/z_others/django-backbone-example/backbone_example/static/js/backbone-tastypie.js",
		"/C/Users/Larry/__prjs/z_others/Django-Backbone-Playground/static/js/app.js",
		"/C/Users/Larry/__prjs/z_others/_b/robots.txt",
		"/C/Users/Larry/__prjs/z_others/chicago_crimes/app/assets/javascripts/map.js.coffee",
		"/C/Users/Larry/AppData/Roaming/Sublime Text 2/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/Users/Larry/__prjs/z_others/memento/models.coffee",
		"/C/Users/Larry/__prjs/z_others/Koffeeban/app/assets/javascripts/controllers/lanes-controller.js.coffee",
		"/C/Users/Larry/__prjs/ourfield/static/js/_models_try.coffee",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/backbone-tastypie.js",
		"/C/Users/Larry/__prjs/z_others/backbone-skeleton_2/index.html",
		"/C/Users/Larry/__prjs/z_others/_b/web_server.coffee",
		"/C/Users/Larry/__prjs/z_others/_b/coffee.bat",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/app.js",
		"/C/Users/Larry/__prjs/z_others/Python-Webserver/config.ini",
		"/C/Users/Larry/__prjs/z_others/_b/javascripts/jquery-1.7.1.min.js",
		"/C/Users/Larry/__prjs/ourfield/static/js/models.coffee",
		"/C/Users/Larry/__prjs/z_others/_b/stylesheets/map.css",
		"/C/Users/Larry/__prjs/z_others/_b/wc.bat",
		"/C/Users/Larry/__prjs/z_others/Koffeeban/app/assets/javascripts/models/cards.js.coffee",
		"/C/Users/Larry/__prjs/z_others/Koffeeban/app/assets/javascripts/application.js",
		"/C/Users/Larry/__prjs/z_others/memento/public/js/underscore.js",
		"/C/Users/Larry/My Dropbox/__TempOurField/urls.py",
		"/C/Users/Larry/Desktop/example.com   Map.htm",
		"/C/Users/Larry/__prjs/ourfield/templates/tweets/index.html",
		"/C/Users/Larry/__prjs/ourfield/scripts/coffee/tweets.coffee",
		"/C/Users/Larry/__prjs/ourfield/static/js/routes.coffee",
		"/C/Users/Larry/__prjs/ourfield/templates/map/base__.html",
		"/C/Users/Larry/__prjs/ourfield/scripts/coffee/routes.coffee",
		"/C/Users/Larry/__prjs/ourfield/templates/map/base_2.html",
		"/C/Users/Larry/__prjs/z_others/django-backbone-example/backbone_example/urls.py",
		"/C/Users/Larry/__prjs/ourfield/apps/tweets/views.py",
		"/C/Users/Larry/__prjs/ourfield/apps/tweets/api.py_",
		"/C/Users/Larry/__prjs/ourfield/apps/api/views.py",
		"/C/Users/Larry/__prjs/ourfield/apps/tweets/urls.py",
		"/C/Users/Larry/__prjs/ourfield/apps/api/models.py",
		"/C/_extjs/ext-4.0.7-gpl/index.html",
		"/C/Users/Larry/__prjs/ourfield/apps/tweets/models.py",
		"/C/Users/Larry/__prjs/ourfield/static/js/tweets.coffee",
		"/C/Users/Larry/__prjs/ourfield/apps/tweets/api.py",
		"/C/Users/Larry/__prjs/ourfield/static/js/tweets.js",
		"/C/Users/Larry/__prjs/ourfield/coffee.bat",
		"/C/Users/Larry/__prjs/ourfield/static/js/test.coffee",
		"/C/Users/Larry/__prjs/ourfield/requirements/project.txt",
		"/C/Users/Larry/__prjs/ourfield/static/js/libs/backbone-tastypie.js",
		"/C/Users/Larry/__prjs/ourfield/requirements/base.txt",
		"/C/Users/Larry/__prjs/ourfield/scripts/windows/syncdb.bat",
		"/C/Users/Larry/__prjs/ourfield/templates/map/ourfield.sublime-project",
		"/C/Users/Larry/__prjs/z_others/django-backbone-example/backbone_example/wc.bat",
		"/C/Users/Larry/__prjs/z_others/django-backbone-example/backbone_example/static/js/a.coffee",
		"/C/Users/Larry/__prjs/ourfield/scripts/coffee/a.coffee",
		"/C/Users/Larry/__prjs/ourfield/static/js/a.js",
		"/C/Users/Larry/__prjs/ourfield/cake.bat"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\Users\\Larry\\__prjs\\ourfield\\ve\\Lib\\site-packages\\pinax_theme_bootstrap",
			"C:\\Users\\Larry\\__prjs\\ourfield",
			"C:\\Users\\Larry\\__prjs\\ourfield_2",
			"C:\\Users\\Larry\\__prjs\\ourfield",
			"C:\\Users\\Larry\\__prjs\\ourfield\\scripts",
			"C:\\Users\\Larry\\__prjs\\z_others\\memento",
			"C:\\Users\\Larry\\__prjs\\ourfield\\apps",
			"C:\\Users\\Larry\\AppData\\Roaming\\Sublime Text 2\\Packages\\Terminal",
			"C:\\Users\\Larry\\AppData\\Roaming\\Sublime Text 2\\Packages\\SideBarEnhancements",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"static",
			"navbar-fixed-top",
			"territoryno",
			"territory",
			"beautifulsoup",
			"DefaultParams",
			"AppData",
			"username",
			"profile.name",
			"limit",
			"close",
			"center",
			"cursor",
			"addListener",
			"click",
			"getPosition",
			"listen",
			"lon",
			"readOnlyHtml",
			"handleAction",
			"marker",
			"Marker",
			"\\",
			"ll",
			"z",
			"position",
			"zoom",
			"AppData",
			"model",
			"google",
			"urlRoot",
			"root",
			"tweet_resource",
			"v1",
			"jsapp",
			"MapView",
			"sendActionToMarker",
			"options",
			"getDiv",
			"memories",
			"memory",
			"Memory",
			"vi?w",
			"this",
			"view",
			"power",
			"terminal",
			"powershell",
			"delete",
			"\")",
			"map",
			"NewYorkLocation",
			"is_ajax",
			"id",
			"PaneView",
			"radius",
			"mapx-app",
			"map-container",
			"mapx-app",
			"updateZones",
			"var",
			"cmd",
			"path"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"user.is_authenticated",
			"lng",
			"place",
			"Place",
			"/",
			"center",
			"zoom",
			"tweet_resource",
			"AppView",
			"places",
			"place",
			"Place",
			"CR"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "templates/map/base.html",
					"settings":
					{
						"buffer_size": 3366,
						"regions":
						{
						},
						"selection":
						[
							[
								1786,
								1786
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Djaneiro/Syntaxes/HTML (Django).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 605.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "static/js/app.coffee",
					"settings":
					{
						"buffer_size": 6248,
						"regions":
						{
						},
						"selection":
						[
							[
								2626,
								2626
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/CoffeeScript/Syntaxes/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1602.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "static/js/models.coffee",
					"settings":
					{
						"buffer_size": 2200,
						"regions":
						{
						},
						"selection":
						[
							[
								1664,
								1664
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/CoffeeScript/Syntaxes/CoffeeScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 828.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "apps/places/models.py",
					"settings":
					{
						"buffer_size": 7554,
						"regions":
						{
						},
						"selection":
						[
							[
								7034,
								7034
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2304.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "apps/map/views.py",
					"settings":
					{
						"buffer_size": 1628,
						"regions":
						{
						},
						"selection":
						[
							[
								588,
								588
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Djaneiro/Syntaxes/Python Django.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "docs/MarkerNos.md",
					"settings":
					{
						"buffer_size": 1184,
						"regions":
						{
						},
						"selection":
						[
							[
								714,
								714
							]
						],
						"settings":
						{
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.sftp":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Larry/__prjs/ourfield/templates/map/ourfield.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 274.0,
	"status_bar_visible": true
}
